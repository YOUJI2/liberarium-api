services:
  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: bookdb
      MYSQL_USER: app
      MYSQL_PASSWORD: app
    ports: ["3306:3306"]
    volumes:
      - mysql_data:/var/lib/mysql
      - ./infra/mysql/init:/docker-entrypoint-initdb.d:ro
    command: [
      "--character-set-server=utf8mb4",
      "--collation-server=utf8mb4_unicode_ci"
    ]
    # DB 셋팅 될때까지 healthcheck 추가하기
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-uroot", "-proot"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 10s
    restart: unless-stopped
    profiles: ["infra","all"]

  redis:
    image: redis:7-alpine
    ports: ["6379:6379"]
    restart: unless-stopped
    profiles: ["infra","all"]

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms768m -Xmx768m
    ports: ["9200:9200"]
    volumes: ["es_data:/usr/share/elasticsearch/data"]
    restart: unless-stopped
    profiles: ["infra","all"]

  kibana:
    image: docker.elastic.co/kibana/kibana:8.14.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports: ["5601:5601"]
    depends_on: ["elasticsearch"]
    restart: unless-stopped
    profiles: ["infra","all"]

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.14.0
    user: root
    command: ["--strict.perms=false"]
    depends_on: ["elasticsearch"]
    volumes:
      - ./logs:/app-logs:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./infra/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
    restart: unless-stopped
    profiles: ["infra","all"]

  app:
    build: .
    ports: ["8080:8080"]
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
      elasticsearch:
        condition: service_started
    volumes:
      - ./logs:/app-logs  # application.yml의 filebeat가 읽을 log경로 일치시키기
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/bookdb
      SPRING_DATASOURCE_USERNAME: app
      SPRING_DATASOURCE_PASSWORD: app
      SPRING_JPA_HIBERNATE_DDL_AUTO: none
      SPRING_REDIS_HOST: redis
      SPRING_ELASTICSEARCH_URIS: http://elasticsearch:9200
    labels:
      co.elastic.logs/enabled: "true"
      co.elastic.logs/json.keys_under_root: "true"
      co.elastic.logs/json.add_error_key: "true"
    restart: unless-stopped
    profiles: ["all"]

  prometheus:
    image: prom/prometheus:v2.54.1
    container_name: prometheus
    ports: ["9090:9090"]
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
#    depends_on: ["app"]
    restart: unless-stopped
    profiles: ["infra","all"]

  grafana:
    image: grafana/grafana:11.2.0
    container_name: grafana
    ports: ["3000:3000"]
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin

       # 로그인 없이 읽기 허용
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: "Viewer"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/grafana/datasources/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml:ro
      - ./infra/grafana/provisioning/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
      - ./infra/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on: ["prometheus"]
    restart: unless-stopped
    profiles: ["infra","all"]

volumes:
  mysql_data:
  es_data:
  prometheus_data:
  grafana_data:
