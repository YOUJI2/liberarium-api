plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'jacoco'
}

group = 'com.liberarium'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
    targetCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // prometheus
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // elastic search
    implementation 'org.springframework.data:spring-data-elasticsearch:5.3.2'

    runtimeOnly 'com.mysql:mysql-connector-j'

    // logback, json encoder
    runtimeOnly 'net.logstash.logback:logstash-logback-encoder:7.4'

    // swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

  testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.testcontainers:junit-jupiter:1.20.1'
    testImplementation 'org.testcontainers:mysql:1.20.1'
    testImplementation 'org.testcontainers:redis:1.20.1'
    testImplementation 'org.testcontainers:elasticsearch:1.20.1'
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

ext.jacocoIncludes = [
  'com/liberarium/api/**/service/**',
  'com/liberarium/api/**/repository/**'
]

jacocoTestReport {
  dependsOn test
  reports {
    xml.required = true
    html.required = true
  }

  // include 화이트리스트 적용
  doFirst {
    classDirectories.setFrom(
      files(sourceSets.main.output.classesDirs.collect { dir ->
        fileTree(dir: dir, include: jacocoIncludes)
      })
    )
  }
}

jacocoTestCoverageVerification {
    // report와 동일한 include 적용 (중요!)
    doFirst {
      classDirectories.setFrom(
        files(sourceSets.main.output.classesDirs.collect { dir ->
          fileTree(dir: dir, include: jacocoIncludes)
        })
      )
    }

    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification
